package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"encoding/base64"
	"fmt"
	"strconv"

	"github.com/ardihikaru/graphql-example-part-1/internal/graph/generated"
	"github.com/ardihikaru/graphql-example-part-1/internal/graph/model"
	"github.com/ardihikaru/graphql-example-part-1/internal/service/auth"
	"github.com/ardihikaru/graphql-example-part-1/internal/service/session"
	"github.com/ardihikaru/graphql-example-part-1/pkg/middleware"
)

// UserLogin generates a token based on the provided credential
func (r *mutationResolver) UserLogin(ctx context.Context, userName string, password string) (*model.TokenResponse, error) {
	correct, err := r.UserSvc.Authenticate(userName, password)
	if !correct {
		return nil, err
	}

	userId, err := r.UserSvc.GetUserIdByUsername(userName)
	if err != nil {
		return nil, err
	}

	authorizerSvc := auth.NewService(r.Log, r.Cfg.JwtAuth.ExpiredInSec, r.TokenAuth)
	token, err := authorizerSvc.Authorize(userId, userName)
	if err != nil {
		return nil, err
	}

	return &model.TokenResponse{
		UserID:  strconv.Itoa(userId),
		Token:   token.AccessToken,
		Expired: int(token.ExpiredIn),
	}, nil
}

// UserCreate creates a new user
func (r *mutationResolver) UserCreate(ctx context.Context, data model.UserInput) (*model.User, error) {
	// extracts session from the context
	sessionData := ctx.Value(middleware.SessionKey).(session.Session)

	resp, err := r.UserSvc.Create(data, &sessionData.UserId)
	return resp, err
}

// UserUpdate is the resolver for the userUpdate field.
func (r *mutationResolver) UserUpdate(ctx context.Context, data model.UserInput) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: UserUpdate - userUpdate"))
}

// PasswordEncrypt encrypts the provided password
func (r *mutationResolver) PasswordEncrypt(ctx context.Context, password string) (string, error) {
	passwordEncrypted, err := r.UserSvc.EncryptPassword(password, r.Cfg.Encryption.PublicKeyRSA)
	return base64.StdEncoding.EncodeToString(passwordEncrypted), err
}

// UserGet fetches a user data
func (r *queryResolver) UserGet(ctx context.Context, userID *string) (*model.User, error) {
	var setUserId int64
	if userID != nil {
		setUserId, _ = strconv.ParseInt(*userID, 10, 64)
	}

	return r.UserSvc.GetById(setUserId)
}

// UserList fetches list of user
func (r *queryResolver) UserList(ctx context.Context, userID string, statusCd string) ([]*model.User, error) {
	return r.UserSvc.List(userID, statusCd)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
